// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"helloworld/internal/biz"
	"helloworld/internal/conf"
	"helloworld/internal/data"
	"helloworld/internal/server"
	"helloworld/internal/service"

	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	// greeterRepo 类似于 java 中的 Repo 接口。该接口提供了操作 internal/biz/greeter.go:18 实体类的增删查改方法
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	// greeterUsecase 类似于 java 中的 Manager 层，Manager 层中注入了 greeterRepo
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	// greeterService 类似于 java 中的 service 层
	greeterService := service.NewGreeterService(greeterUsecase)
	// grpcServer 创建用于服务间调用的 server
	grpcServer := server.NewGRPCServer(confServer, greeterService, logger)
	// httpServer 创建 http 服务
	httpServer := server.NewHTTPServer(confServer, greeterService, logger)
	//app := newApp(logger, grpcServer, httpServer)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
